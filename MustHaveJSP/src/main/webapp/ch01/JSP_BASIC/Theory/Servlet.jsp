<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<%
/*
	서블릿과 JSP 실행

	서블릿: Java로 작성된 서버사이드 프로그램. 웹 컨테이너는 서블릿의 생명주기를 관리하고 클라이언트 요청에 따라
	서블릿을 실행하여 동적인 결과를 생성한다.
	
	JSP(JavaServer Pages) : HTML 내에 Java 코드를 포함하여 동적 웹 페이지를 생성하는 기술.
	JSP 역시 서블릿으로 변환되어 실행된다.
	
	애플리케이션 전체가 클라이언트에 다운로드된 후 실행되는 자바 애플릿은 속도, 보안, 유연성 등에서 한계가 있다.
	그래서 서버 측에서 실행되는 서블릿이 등장했다, 서블릿은 클라이언트의 요청을 받으면 서버에서 처리를 한 후,
	응답으로는 결과 값만 보내주는 구조이다.

	앞서 보여준 동적 웹 페이지 방식에서의 전처리 부분을 서블릿이 담당하는 구조이다. 서블릿은 자바 파일을
	컴파일한 클래스 파일(.class) 형태이며, 이를 실행하고 관리해주는 런타임을 서블릿 컨테이너라고 한다.
	대표적인 서블릿 컨테이너는 톰캣이 있다.
	
	서블릿에도 단점이 있었다. 서블릿은 기본적으로 자바 코드인데, 결과로 보여줄 HTML 코드를 일일이 자바로 생성
	조합하다 보니 너무 많은 코드가 필요했다, 그래서 발상을 전환하여, 기본을 HTML로하고 필요한 부분만 자바
	코드를 삽입하는 형태인 JSP가 탄생했다.

	그림에서 보듯(책 참고 page 60(서블릿)~61(JSP)) JSP의 구동 방식은 다소 복잡해 보이지만, 알고 보면 JSP파일을
	서블릿으로 변환하여
	서블릿을 실행하는 방식입니다, 한번 서블릿으로 컴파일된 JSP 파일은 캐시되므로 실질적인 성능 저하 없이
	개발 생산성과 유지보수 편의성을 모두 얻는 멋진 아이디어인 셈이다. 

	또한 JSP가 서블릿으로 변환되어 실행된다는 것은 서블릿 기술도 여전히 사용할 수 있다는 뜻이다.
	그래서 용도에 따라 더 유리한 기술을 골라 사용할 수 있다, 실제로 JSP는 클라이언트에 보여지는 결과 페이지를
	생성할때 주로 쓰이며 서블릿은 UI가 없는 제어나 기타 처리 용도로 쓰인다, 두기술의 차이를 정리해 봤다.

	<서블릿>
	1. 자바 코드 안에서 HTML 페이지를 생성한다.
	2. 변수 선언 및 초기화가 반드시 선행되어야 한다.
	3. 컨트롤러를 만들때 사용한다.

	<JSP>
	1. HTML 코드 안에서 필요한 부분만 자바 코드를 스크립트 형태로 추가한다.
	2. 자주 쓰이는 기능을 내장 객체로 제공하여 즉시 사용할 수 있다.
	3. 처리된 결과를 보여주는 뷰를 만들때 사용한다.
------------------------------------------------------------------------------
	<JSP / 서블릿 컴파일 처리 과정>
	
	WAS는 JSP 페이지에 대한 요청이 들어오면 다음과 같은 처리를 한다.
	(./JSP 서블릿 컴파일 처리 과정.png 참고)
	
	
	1. JSP와 관련된 서블릿 클래스가 없는 경우 (1.1)

	JSP 페이지로부터 자바 코드를 생성한다. (1.2)
	자바 코드를 컴파일해서 서블릿 클래스를 생성한다. (1.3)
	변환된 서블릿 클래스를 실행하고, WAS의 메모리에 적재된다.
	서블릿에 클라이언트 요청을 전달한다. (2.1)
	서블릿의 요청을 처리한 결과를 응답으로 생성한다. (2.2)
	응답을 웹 브라우저에 전송한다. (3)
	
	
	2. JSP에 해당하는 서블릿이 존재하는 경우(즉, 이미 과정 1.1 ~ 1.3을 거친 경우)

	서블릿에 클라이언트 요청을 전달한다. (2.1)
	서블릿의 요청을 처리한 결과를 응답으로 생성한다. (2.2)
	응답을 웹 브라우저에 전송한다. (3)
	
	
	· JSP를 요청하면 JSP를 직접 실행하는 것이 아니라, JSP를 자바 코드로 변환한 뒤 컴파일해서 생성한 서블릿을 실행하는 것

	· 톰캣은 work폴더에 JSP를 변환한 자바 소스 코드와 서블릿 클래스를 생성함

	· JSP 페이지를 변경하면 이미 서블릿이 생성되어있어도 JSP 페이지로부터 서블릿 클래스를 다시 생성함 
--------------------------------------------------------------------------------
	https://hrcony8753.tistory.com/6
	<JSP 동작구조>
	
	01. JSP의 동작 구조
	정적 페이지 요청(HTML, 이미지, 텍스트 파일 등에 대한 요청)은 웹 서버에서 해결한다.

	동적 페이지 요청(JSP 페이지에 대한 요청)은 웹 서버에서 JSP 컨테이너로 다시 전달된다.
	즉, JSP 페이지는 웹 컨테이너에 의해 실행된다.

	1-1. JSP 페이지의 내부적인 처리방식
	웹 브라우저 -> 웹 서버 -> JSP 컨테이너 -> *.jsp ->*.java ->*.class -> 웹서버 -> 웹 브라우저

	간단하게 설명하자면 클라이언트가 *.jsp에 대한 요청을 웹 서버에 하게 된다.
	웹 서버는 다시 이 요청을 JSP 컨테이너로 넘긴다.

	JSP 컨테이너는 해당 JSP 페이지를 찾아 서블릿(자바 파일/*.java)으로 변환 시킨다. 자바 파일을 컴파일 한다. 

	자바 파일의 결과가 다시 사용자의 웹 브라우저로 전송되어 클라이언트가 요청한 결과를 받아볼 수 있게 된다.
	     			  
*/

%>

</body>
</html>